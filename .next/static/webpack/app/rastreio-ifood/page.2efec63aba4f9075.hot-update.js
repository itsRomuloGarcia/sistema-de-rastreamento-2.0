"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/rastreio-ifood/page",{

/***/ "(app-pages-browser)/./hooks/use-tracking-cpf.ts":
/*!***********************************!*\
  !*** ./hooks/use-tracking-cpf.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrackingStatus: function() { return /* binding */ getTrackingStatus; },\n/* harmony export */   useSheetDataIfood: function() { return /* binding */ useSheetDataIfood; },\n/* harmony export */   useTrackingSearchCPF: function() { return /* binding */ useTrackingSearchCPF; }\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ getTrackingStatus,useSheetDataIfood,useTrackingSearchCPF auto */ \n\nconst SHEET_URL_IFOOD = process.env.NEXT_PUBLIC_SHEET_URL_IFOOD || \"https://docs.google.com/spreadsheets/d/1A8rNGt2e0mxk124nN9sjkyvaek0O1kNmS-Pd8naggpM/edit?usp=sharing\";\nfunction parseDate(dateStr) {\n    if (!dateStr || dateStr === \"N/A\" || dateStr.trim() === \"\") return null;\n    try {\n        // Extrai dia, mês e ano diretamente\n        const [day, month, year] = dateStr.trim().split(\"/\").map(Number);\n        // Valida os valores\n        if (!day || !month || !year || day < 1 || day > 31 || month < 1 || month > 12) {\n            return null;\n        }\n        // Cria a data em UTC (ignora timezone completamente)\n        const parsed = new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));\n        // Verificação rigorosa usando UTC\n        if (parsed.getUTCDate() === day && parsed.getUTCMonth() === month - 1 && parsed.getUTCFullYear() === year) {\n            return parsed;\n        }\n    } catch (error) {\n        console.warn(\"Erro ao fazer parse da data:\", dateStr, error);\n    }\n    return null;\n}\nfunction calculateDeliveryTime(startDate, endDate) {\n    const start = parseDate(startDate);\n    if (!start) return undefined;\n    const end = endDate ? parseDate(endDate) : new Date();\n    if (!end) return undefined;\n    // Calcula diferença em dias usando UTC\n    const startMidnight = Date.UTC(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate());\n    const endMidnight = Date.UTC(end.getUTCFullYear(), end.getUTCMonth(), end.getUTCDate());\n    const diffTime = endMidnight - startMidnight;\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays >= 0 ? diffDays : undefined;\n}\nfunction getTrackingStatus(data) {\n    const today = new Date();\n    const deliveryDate = data[\"Data de Entrega\"] ? parseDate(data[\"Data de Entrega\"]) : null;\n    const expectedDate = parseDate(data[\"Previsao de Entrega\"]);\n    if (deliveryDate) {\n        return {\n            status: \"delivered\",\n            label: \"Entregue\",\n            color: \"text-green-700 dark:text-green-400\",\n            bgColor: \"bg-green-100 dark:bg-green-900/30\"\n        };\n    }\n    if (expectedDate && today > expectedDate) {\n        return {\n            status: \"delayed\",\n            label: \"Atrasado\",\n            color: \"text-red-700 dark:text-red-400\",\n            bgColor: \"bg-red-100 dark:bg-red-900/30\"\n        };\n    }\n    const shippingDate = parseDate(data[\"Data de Envio\"]);\n    if (shippingDate) {\n        return {\n            status: \"shipped\",\n            label: \"Em Tr\\xe2nsito\",\n            color: \"text-blue-700 dark:text-blue-400\",\n            bgColor: \"bg-blue-100 dark:bg-blue-900/30\"\n        };\n    }\n    return {\n        status: \"pending\",\n        label: \"Processando\",\n        color: \"text-yellow-700 dark:text-yellow-400\",\n        bgColor: \"bg-yellow-100 dark:bg-yellow-900/30\"\n    };\n}\n// Mapeamento EXATO para a planilha iFood\nconst validateAndCleanDataIfood = (rawData)=>{\n    if (!Array.isArray(rawData)) {\n        console.warn(\"Dados iFood n\\xe3o s\\xe3o um array:\", rawData);\n        return [];\n    }\n    return rawData.filter((item)=>{\n        if (!item || typeof item !== \"object\") return false;\n        const hasCNPJ = item[\"CNPJ\"] && String(item[\"CNPJ\"]).trim() !== \"\";\n        return hasCNPJ;\n    }).map((item)=>{\n        try {\n            const cnpjClean = item[\"CNPJ\"] ? String(item[\"CNPJ\"]).replace(/\\D/g, \"\") : \"\";\n            const pedidoQepta = item[\"Qepta\"] && String(item[\"Qepta\"]).trim() !== \"\" ? Number(String(item[\"Qepta\"]).trim()) : 0;\n            // BUSCA COMPROVANTE NA COLUNA BN (NÃO EXCLUIR)\n            let comprovanteUrl = \"\";\n            // Tenta diferentes nomes possíveis para a coluna BN\n            const possiveisNomes = [\n                \"N\\xc3O EXCLUIR\",\n                \"N\\xc3O EXCLUIR \",\n                \"NAO EXCLUIR\"\n            ];\n            for (const nomeColuna of possiveisNomes){\n                if (item[nomeColuna] && String(item[nomeColuna]).trim().startsWith(\"http\")) {\n                    const link = String(item[nomeColuna]).trim();\n                    comprovanteUrl = link.replace(\"/view?\", \"/preview?\");\n                    console.log(\"✅ Link do comprovante encontrado:\", comprovanteUrl);\n                    break;\n                }\n            }\n            // Se não encontrou com os nomes padrão, busca qualquer coluna que comece com \"NÃO\"\n            if (!comprovanteUrl) {\n                const colunas = Object.keys(item);\n                const colunaBN = colunas.find((col)=>col.startsWith(\"N\\xc3O\") || col.startsWith(\"NAO\"));\n                if (colunaBN && item[colunaBN] && String(item[colunaBN]).trim().startsWith(\"http\")) {\n                    const link = String(item[colunaBN]).trim();\n                    comprovanteUrl = link.replace(\"/view?\", \"/preview?\");\n                    console.log(\"✅ Link encontrado na coluna:\", colunaBN, comprovanteUrl);\n                }\n            }\n            const tempoEntrega = calculateDeliveryTime(item[\"Data real de Sa\\xedda\"] || \"\", item[\"Data Real de Entrega totem (executada)\"] || \"\");\n            const result = {\n                Pedido: pedidoQepta,\n                QEPTA: pedidoQepta,\n                CNPJ: cnpjClean,\n                \"Data de Envio\": item[\"Data real de Sa\\xedda\"] ? String(item[\"Data real de Sa\\xedda\"]).trim() : \"N/A\",\n                \"Previsao de Entrega\": item[\"Data real da Previs\\xe3o de Entrega\"] ? String(item[\"Data real da Previs\\xe3o de Entrega\"]).trim() : \"N/A\",\n                \"Data de Entrega\": item[\"Data Real de Entrega totem (executada)\"] ? String(item[\"Data Real de Entrega totem (executada)\"]).trim() : undefined,\n                \"Nota Fiscal\": item[\"NF do Totem\"] ? Number(String(item[\"NF do Totem\"]).trim()) || 0 : 0,\n                Quantidade: item[\"Quantidade\"] ? Number(item[\"Quantidade\"]) || 1 : 1,\n                \"Tipo do Produto\": item[\"Modelo do totem\"] ? String(item[\"Modelo do totem\"]).trim() : \"N/A\",\n                Modelo: item[\"Modelo do totem\"] ? String(item[\"Modelo do totem\"]).trim() : \"N/A\",\n                Cidade: item[\"Cidade\"] ? String(item[\"Cidade\"]).trim() : \"N/A\",\n                Estado: item[\"Estado\"] ? String(item[\"Estado\"]).trim() : \"N/A\",\n                Transportadora: item[\"Transportadora\"] ? String(item[\"Transportadora\"]).trim() : \"N/A\",\n                Cliente: item[\"Raz\\xe3o Social\"] ? String(item[\"Raz\\xe3o Social\"]).trim() : \"N/A\",\n                \"Valor do Produto\": \"N/A\",\n                \"Valor do Transporte\": \"N/A\",\n                \"Comprovante URL\": comprovanteUrl,\n                \"Tempo de Entrega\": tempoEntrega,\n                \"Nome Fantasia\": item[\"Nome Fantasia\"] ? String(item[\"Nome Fantasia\"]).trim() : \"N/A\"\n            };\n            return result;\n        } catch (error) {\n            console.warn(\"❌ Erro ao processar item iFood:\", item, error);\n            return null;\n        }\n    }).filter((item)=>item !== null);\n};\nfunction useSheetDataIfood() {\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.useQuery)({\n        queryKey: [\n            \"sheet-data-ifood\"\n        ],\n        queryFn: async ()=>{\n            try {\n                if (!SHEET_URL_IFOOD) {\n                    throw new Error(\"URL da planilha iFood n\\xe3o configurada\");\n                }\n                console.log(\"\\uD83D\\uDD04 Buscando dados da planilha iFood...\");\n                const exportUrl = SHEET_URL_IFOOD.replace(\"/edit\", \"/export\").replace(\"?usp=sharing\", \"\") + \"?format=csv&gid=541004446\";\n                const response = await fetch(exportUrl, {\n                    headers: {\n                        \"Cache-Control\": \"no-cache\"\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error(\"Erro HTTP iFood: \".concat(response.status));\n                }\n                const csvText = await response.text();\n                if (!csvText || csvText.trim() === \"\") {\n                    throw new Error(\"Planilha iFood vazia\");\n                }\n                const workbook = xlsx__WEBPACK_IMPORTED_MODULE_1__.read(csvText, {\n                    type: \"string\",\n                    raw: false,\n                    dateNF: \"dd/mm/yyyy\"\n                });\n                const sheetName = workbook.SheetNames.find((name)=>name.toLowerCase().includes(\"ifood\")) || workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[sheetName];\n                const rawData = xlsx__WEBPACK_IMPORTED_MODULE_1__.utils.sheet_to_json(worksheet, {\n                    raw: false,\n                    defval: \"\"\n                });\n                // DEBUG: Mostrar colunas disponíveis\n                if (rawData.length > 0) {\n                    console.log(\"\\uD83D\\uDD0D COLUNAS DISPON\\xcdVEIS:\", Object.keys(rawData[0]));\n                }\n                const cleanData = validateAndCleanDataIfood(rawData);\n                console.log(\"✅ Dados iFood processados:\", cleanData.length, \"registros\");\n                return cleanData;\n            } catch (error) {\n                console.error(\"❌ Erro ao buscar dados iFood:\", error);\n                throw error;\n            }\n        },\n        refetchInterval: 30000,\n        staleTime: 10000,\n        retry: 2\n    });\n}\nfunction useTrackingSearchCPF(query) {\n    const { data: allData, ...rest } = useSheetDataIfood();\n    const trackingData = (allData === null || allData === void 0 ? void 0 : allData.filter((item)=>{\n        if (!item || !query) return false;\n        try {\n            const cnpjItem = item.CNPJ || \"\";\n            const queryClean = String(query).replace(/\\D/g, \"\").trim();\n            if (!queryClean) return false;\n            return cnpjItem === queryClean;\n        } catch (error) {\n            console.warn(\"Erro na busca iFood:\", error);\n            return false;\n        }\n    })) || [];\n    return {\n        data: trackingData,\n        ...rest\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-tracking-cpf.ts\n"));

/***/ })

});